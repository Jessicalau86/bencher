---
import { getCollection } from "astro:content";
import DocsLayout from "../../../layouts/docs/DocsLayout.astro";
import {getLangCollection} from "../../../i18n/utils.ts"
import { Language, defaultLang, otherLanguages, showDefaultLang, tutorial } from "../../../i18n/ui";

export async function getStaticPaths() {
    return otherLanguages.map((lang) => {return { params: { lang } }});
}

const lang: Language = Astro.params.lang ?? defaultLang;
const langPath = !showDefaultLang && lang === defaultLang ?  "" : `${lang}/`;

const tutorialCollection = await getLangCollection("tutorial");

const how_to = await getCollection("how_to");
how_to.sort((a, b) => a.data.sortOrder - b.data.sortOrder);

const explanation = await getCollection("explanation");
explanation.sort((a, b) => a.data.sortOrder - b.data.sortOrder);

const reference = await getCollection("reference");
reference.sort((a, b) => a.data.sortOrder - b.data.sortOrder);

const title = () => {
    switch(lang) {
        case Language.es:
            return "Documentos de Bencher";
        case Language.fr:
            return "Documents de Bencher";
        case Language.pt:
            return "Documentação da Microsoft";
        default:
            return "Bencher Docs";
    }
};

const description = () => {
    switch (lang) {
        case Language.es:
            return "Índice de contenidos de la documentación de Bencher. Aprenda a configurar evaluaciones comparativas continuas para su proyecto.";
        case Language.fr:
            return "Table des matières de la documentation Bencher. Découvrez comment configurer une analyse comparative continue pour votre projet.";
        case Language.pt:
            return "Índice da documentação do Bencher. Aprenda como configurar benchmarking contínuo para seu projeto.";
        default:
            return "Table of contents for the Bencher documentation. Learn how to setup continuous benchmarking for your project.";
    }
}

const alsoIn = () => {
    switch (lang) {
        case Language.es:
          return "También disponible en:";
        case Language.fr:
            return "Également disponible en:";
        case Language.pt:
            return "Também disponível em:";
        default:
            return "Also available in:";
    }
}
---

<DocsLayout title={title()} description={description()} heading={title()} lang={lang}>
  <div class="menu">
    <p class="menu-label">{tutorial(lang)}</p>
    <ul class="menu-list">
      {
        tutorialCollection[lang]?.map((page) => (
          <li>
            <a href={`/docs/${langPath}tutorial/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">How To</p>
    <ul class="menu-list">
      {
        how_to.map((page) => (
          <li>
            <a href={`/docs/how-to/${page.slug}`}>{page.data.heading}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">Explanation</p>
    <ul class="menu-list">
      {
        explanation.map((page) => (
          <li>
            <a href={`/docs/explanation/${page.slug}`}>{page.data.heading}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">Reference</p>
    <ul class="menu-list">
      <li>
        <a href="/docs/reference/api">REST API</a>
      </li>
      <li>
        <a href="/docs/reference/architecture">Architecture</a>
      </li>
      {
        reference.map((page) => (
          <li>
            <a href={`/docs/reference/${page.slug}`}>{page.data.heading}</a>
          </li>
        ))
      }
    </ul>
  </div>
  <h3 class="title">{alsoIn()}</h3>
  <ul>
    <li>
      <a href="/docs">English</a>
    </li>
    <li>
      <a href="/docs/es">Español</a>
    </li>
    <li>
      <a href="/docs/pt">Português</a>
    </li>
  </ul>
</DocsLayout>
