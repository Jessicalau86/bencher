/*
 Generated by typeshare 1.6.0
*/

export type VersionNumber = number;

export type Iteration = number;

export type NonEmpty = string;

export type Slug = string;

export interface JsonMetricKind {
	uuid: Uuid;
	project: Uuid;
	name: NonEmpty;
	slug: Slug;
	units: NonEmpty;
	created: string;
	modified: string;
}

export enum JsonStatisticKind {
	Z = "z",
	T = "t",
}

export type SampleSize = number;

export type Boundary = number;

export interface JsonStatistic {
	uuid: Uuid;
	threshold: Uuid;
	test: JsonStatisticKind;
	min_sample_size?: SampleSize;
	max_sample_size?: SampleSize;
	window?: number;
	lower_boundary?: Boundary;
	upper_boundary?: Boundary;
	created: string;
}

export interface JsonThresholdStatistic {
	uuid: Uuid;
	project: Uuid;
	statistic: JsonStatistic;
	created: string;
}

export type BenchmarkName = string;

export interface JsonMetric {
	value: number;
	lower_value?: number;
	upper_value?: number;
}

export interface JsonBoundary {
	lower_limit?: number;
	upper_limit?: number;
}

export interface JsonBenchmarkMetric {
	uuid: Uuid;
	project: Uuid;
	name: BenchmarkName;
	slug: Slug;
	metric: JsonMetric;
	boundary: JsonBoundary;
	created: string;
	modified: string;
}

export interface JsonReportResult {
	metric_kind: JsonMetricKind;
	threshold?: JsonThresholdStatistic;
	benchmarks: JsonBenchmarkMetric[];
}

export type JsonReportIteration = JsonReportResult[];

export type JsonReportResults = JsonReportIteration[];

export type BranchName = string;

export interface JsonBranch {
	uuid: Uuid;
	project: Uuid;
	name: BranchName;
	slug: Slug;
	created: string;
	modified: string;
}

export interface JsonTestbed {
	uuid: Uuid;
	project: Uuid;
	name: NonEmpty;
	slug: Slug;
	created: string;
	modified: string;
}

export interface JsonThreshold {
	uuid: Uuid;
	project: Uuid;
	metric_kind: JsonMetricKind;
	branch: JsonBranch;
	testbed: JsonTestbed;
	statistic: JsonStatistic;
	created: string;
	modified: string;
}

export enum JsonLimit {
	Lower = "lower",
	Upper = "upper",
}

export enum JsonAlertStatus {
	Active = "active",
	Dismissed = "dismissed",
}

export interface JsonAlert {
	uuid: Uuid;
	report: Uuid;
	iteration: number;
	threshold: JsonThreshold;
	benchmark: JsonBenchmarkMetric;
	limit: JsonLimit;
	status: JsonAlertStatus;
	modified: string;
}

export type JsonReportAlerts = JsonAlert[];

export type Uuid = string;

export type CardCvc = string;

export type LastFour = string;

export type ExpirationMonth = number;

export type CardNumber = string;

export type ExpirationYear = number;

export type Email = string;

export type GitHash = string;

export type Jwt = string;

export type ResourceId = string;

export type Secret = string;

export type Url = string;

export type UserName = string;

export interface JsonOrganization {
	uuid: Uuid;
	name: NonEmpty;
	slug: Slug;
	created: string;
	modified: string;
}

export interface JsonCustomer {
	uuid: Uuid;
	name: UserName;
	email: Email;
}

export enum CardBrand {
	Amex = "amex",
	Diners = "diners",
	Discover = "discover",
	Jcb = "jcb",
	Mastercard = "mastercard",
	Unionpay = "unionpay",
	Visa = "visa",
	Unknown = "unknown",
}

export interface JsonCardDetails {
	brand: CardBrand;
	last_four: LastFour;
	exp_month: ExpirationMonth;
	exp_year: ExpirationYear;
}

export enum PlanLevel {
	Free = "free",
	Team = "team",
	Enterprise = "enterprise",
}

export enum PlanStatus {
	Active = "active",
	Canceled = "canceled",
	Incomplete = "incomplete",
	IncompleteExpired = "incomplete_expired",
	PastDue = "past_due",
	Paused = "paused",
	Trialing = "trialing",
	Unpaid = "unpaid",
}

export interface JsonPlan {
	organization: Uuid;
	customer: JsonCustomer;
	card: JsonCardDetails;
	level: PlanLevel;
	unit_amount: number;
	current_period_start: string;
	current_period_end: string;
	status: PlanStatus;
}

export interface JsonUsage {
	metrics_used: number;
}

export interface JsonAlertStats {
	active: number;
}

export interface JsonUpdateAlert {
	status?: JsonAlertStatus;
}

export interface JsonPerfAlert {
	uuid: Uuid;
	limit: JsonLimit;
	status: JsonAlertStatus;
	modified: string;
}

export interface JsonBenchmark {
	uuid: Uuid;
	project: Uuid;
	name: BenchmarkName;
	slug: Slug;
	created: string;
	modified: string;
}

export interface JsonVersion {
	number: VersionNumber;
	hash?: GitHash;
}

export interface JsonBranchVersion {
	uuid: Uuid;
	project: Uuid;
	name: BranchName;
	slug: Slug;
	version: JsonVersion;
	created: string;
	modified: string;
}

export enum JsonVisibility {
	Public = "public",
	Private = "private",
}

export interface JsonProject {
	uuid: Uuid;
	organization: Uuid;
	name: NonEmpty;
	slug: Slug;
	url?: Url;
	visibility: JsonVisibility;
	created: string;
	modified: string;
}

export interface JsonPerfMetric {
	report: Uuid;
	iteration: Iteration;
	start_time: string;
	end_time: string;
	version: JsonVersion;
	threshold?: JsonThresholdStatistic;
	metric: JsonMetric;
	boundary: JsonBoundary;
	alert?: JsonPerfAlert;
}

export interface JsonPerfMetrics {
	branch: JsonBranch;
	testbed: JsonTestbed;
	benchmark: JsonBenchmark;
	metrics: JsonPerfMetric[];
}

export interface JsonPerf {
	project: JsonProject;
	metric_kind: JsonMetricKind;
	start_time?: string;
	end_time?: string;
	results: JsonPerfMetrics[];
}

export interface JsonUser {
	uuid: Uuid;
	name: UserName;
	slug: Slug;
	email: Email;
	admin: boolean;
	locked: boolean;
}

export enum JsonAdapter {
	Magic = "magic",
	Json = "json",
	CSharp = "c_sharp",
	CSharpDotNet = "c_sharp_dot_net",
	Cpp = "cpp",
	CppCatch2 = "cpp_catch2",
	CppGoogle = "cpp_google",
	Go = "go",
	GoBench = "go_bench",
	Java = "java",
	JavaJmh = "java_jmh",
	Js = "js",
	JsBenchmark = "js_benchmark",
	JsTime = "js_time",
	Python = "python",
	PythonAsv = "python_asv",
	PythonPytest = "python_pytest",
	Ruby = "ruby",
	RubyBenchmark = "ruby_benchmark",
	Rust = "rust",
	RustBench = "rust_bench",
	RustCriterion = "rust_criterion",
	RustIai = "rust_iai",
}

export interface JsonReport {
	uuid: Uuid;
	user: JsonUser;
	project: JsonProject;
	branch: JsonBranchVersion;
	testbed: JsonTestbed;
	start_time: string;
	end_time: string;
	adapter: JsonAdapter;
	results: JsonReportResults;
	alerts: JsonReportAlerts;
	created: string;
}

export interface JsonSignup {
	name: UserName;
	slug?: Slug;
	email: Email;
	plan?: PlanLevel;
	invite?: Jwt;
}

export interface JsonLogin {
	email: Email;
	plan?: PlanLevel;
	invite?: Jwt;
}

export interface JsonAuthToken {
	token: Jwt;
}

export interface JsonAuthUser {
	user: JsonUser;
	token: Jwt;
}

export interface JsonToken {
	uuid: Uuid;
	user: Uuid;
	name: NonEmpty;
	token: Jwt;
	creation: string;
	expiration: string;
}

export enum JsonOrganizationPermission {
	View = "view",
	Create = "create",
	Edit = "edit",
	Delete = "delete",
	Manage = "manage",
	ViewRole = "view_role",
	CreateRole = "create_role",
	EditRole = "edit_role",
	DeleteRole = "delete_role",
}

export enum JsonProjectPermission {
	View = "view",
	Create = "create",
	Edit = "edit",
	Delete = "delete",
	Manage = "manage",
	ViewRole = "view_role",
	CreateRole = "create_role",
	EditRole = "edit_role",
	DeleteRole = "delete_role",
}

